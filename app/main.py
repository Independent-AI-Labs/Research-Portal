import os

import gradio as gr

from research_portal.app.utils.report_scanner import find_reports

# Configuration for the Smart Reports directory
# As per SEED_INSTRUCTIONS, default is './Smart Reports/'
# This could be made configurable via config.py or environment variables later.
REPORTS_DIR_CONFIG_KEY = "SMART_REPORTS_DIR_PATH"
DEFAULT_REPORTS_DIR = "./Smart Reports"  # Relative to the project root

# Determine the actual reports directory path
from pathlib import Path  # Ensure Path is imported

reports_base_dir_abs = Path(os.getenv(REPORTS_DIR_CONFIG_KEY, DEFAULT_REPORTS_DIR)).resolve()


def get_report_gallery_items():
    """
    Scans for reports and prepares them for display in the Gradio gallery.
    Returns a list of tuples: (filepath, display_name)
    """
    # Ensure the reports directory exists before scanning
    if not reports_base_dir_abs.is_dir():
        print(f"Warning: Reports directory '{reports_base_dir_abs}' not found. Gallery will be empty.")
        return []

    # find_reports expects a string path
    report_data = find_reports(str(reports_base_dir_abs))

    gallery_items = []
    for report in report_data:
        # The 'path' from find_reports is relative to reports_base_dir_abs
        # e.g., "My Report Subfolder/My_Report.html"
        # Gradio's gr.File needs a path that it can serve.
        # If reports_base_dir_abs is an allowed_path, then the value for gr.File
        # should be the full path to the file on the filesystem.
        # The link generated by Gallery will be like /file=<full_path_to_file>
        # or /file=<path_relative_to_served_dir>

        # Let's construct the full path to the HTML file.
        full_html_path = str(reports_base_dir_abs / report['path'])
        display_name = report['name']
        gallery_items.append((full_html_path, display_name))

    return gallery_items


# --- Gradio Interface ---
with gr.Blocks(title="Smart Reports Gallery") as app:
    gr.Markdown("# Smart Reports Gallery")
    gr.Markdown("Discover and view interactive HTML reports.")

    gallery_items = get_report_gallery_items()

    if not gallery_items:
        gr.Markdown("## No reports found.")
        gr.Markdown(
            f"Please ensure that the directory '{reports_base_dir_abs}' exists "
            "and contains valid HTML reports, then restart the application."
        )
    else:
        # Display reports in a gallery.
        # Each item in the gallery will be a clickable card.
        # When clicked, Gradio serves the file from an allowed path.
        # The link will open in a new tab by default if it's an HTML file.
        # The label for each item in the gallery is taken from the second element of the tuple.
        # The value (first element) is the path to the file.
        gr.Gallery(
            value=gallery_items,
            label="Available Reports",
            show_label=True,
            columns=[4],  # Adjust number of columns as needed
            object_fit="contain",  # Or 'cover', 'fill'
            height="auto"
        )

# To run this application:
# 1. Ensure 'Smart Reports' directory exists at the project root and contains HTML files.
#    Example: ./Smart Reports/My Report/My_Report.html
# 2. Run from the project root: python app/main.py
#
# Gradio will serve files from any directory specified in `allowed_paths` when creating `gr.Blocks`.
# By default, Gradio allows serving files from the directory where the script is run, and subdirectories.
# For our case, we need to ensure that `reports_base_dir_abs` is accessible.
# Gradio's `gr.Gallery` component, when given a list of file paths, automatically makes them
# accessible if they are local files. It handles the /file=... endpoint.
# The key is that the paths provided to gr.Gallery must be actual file paths that Gradio can read.

# The `SEED_INSTRUCTIONS.md` mentions:
# "A key feature will be to make the Smart Reports directory available as a static path that Gradio can serve.
# This can be achieved using Gradio's allowed_paths or by mounting a static directory with the underlying FastAPI app."
#
# `gr.Gallery` handles this implicitly for local files. If `reports_base_dir_abs` is outside the default
# locations Gradio serves, we might need to add it to `allowed_paths` in `gr.Blocks(allowed_paths=[str(reports_base_dir_abs)])`.
# However, let's test the default behavior first, as Gradio has evolved.
# Using absolute paths for gallery items is generally robust.

# For Python 3.8 compatibility with pathlib:
# from pathlib import Path # Already imported at the top

if __name__ == "__main__":
    # This is to make sure Path.cwd() is the project root if running `python app/main.py`
    # The `reports_base_dir_abs` is resolved from `DEFAULT_REPORTS_DIR` which is relative to project root
    # or from the SMART_REPORTS_DIR_PATH environment variable.
    print(f"Attempting to serve reports from: {reports_base_dir_abs}")
    if not reports_base_dir_abs.is_dir():
        print(f"Error: The configured reports directory does not exist: {reports_base_dir_abs}")
        print(f"Please create this directory or set the '{REPORTS_DIR_CONFIG_KEY}' environment variable to point to a valid directory.")
        print("Application will start, but no reports will be found.")
        # We still launch the app, but it will show the 'No reports found' message.

    # The `allowed_paths` argument in gr.Blocks is important.
    # It should include the actual directory Gradio needs to serve files from.
    # If reports_base_dir_abs doesn't exist, allowing it might not be an issue,
    # but it's cleaner to only allow existing paths if possible.
    # However, Gradio might require the path even if empty, to set up watchers.
    # For simplicity, we'll keep allowing reports_base_dir_abs.
    app.launch()
    # is not naturally under a path Gradio serves by default (like script dir or CWD).
    # Since reports_base_dir_abs is an absolute path, explicitly allowing it is safer.
    # app.launch(allowed_paths=[str(reports_base_dir_abs)]) # Temporarily commented out for testing
